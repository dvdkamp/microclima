lns <- lns[order(lns)]
lns <- array(lns, dim = dim(r)[1:2])
lns
}
# Clear sky radiation
library(raster)
library(zoo)
e <- extent(-5.40, -5.00, 49.90, 50.15)
r <- raster(cfc[,,1])
extent(r) <- e
lats <- latsfromr(r)
lons <- lonsfromr(r)
tme <- as.POSIXlt(c(0:8759) * 3600, origin = "2010-01-01", tz = "GMT")
jd <- julday(tme$year + 1900, tme$mon + 1, tme$mday)
cfc2 <- cfc
for (i in 1:5) {
for (j in 1:8) {
si <- siflat(tme$hour, lats[i,j], lons[i,j], jd, merid = 0)
rso <- si * 4.87
rs <- si * dnirad[i,j,] + difrad[i,j,]
s <- rs / rso
s[s >= 1] <- NA
s[s <= 0] <- NA
s[1] <- mean(s, na.rm = T)
s[length(s)] <- mean(s, na.rm = T)
s <- na.approx(s, na.rm = F)
n <- 1 - s
n <- n ^ 1.5
cfc2[i, j, ] <- n
}
}
cfc <- cfc2
devtools::use_data(cfc, overwrite = T)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?skyviewtopo
devtools::document()
devtools::document()
?coastalTps
library(raster)
# =========================================
# Calculate land-sea temperature difference
# =========================================
temp <- tas[,,1]
sst <- 10.665
dT <- if_raster(sst - temp, dtm1km)
# ============================
# Obtain coastal exposure data
# ============================
lsw <- landsearatios[,,7]  # upwind
lsa <- apply(landsearatios, c(1, 2), mean) # mean, all directions
lsw <- if_raster(lsw, dtm100m)
lsa <- if_raster(lsa, dtm100m)
# ==========================================================
# Calculate coastal effects using thin-plate spline and plot
# ==========================================================
dTf <- coastalTps(dT, lsw, lsa)
par(mfrow = c(2, 1))
plot(sst - dT, main = expression(paste("Temperature ",(~degree~C))))
plot(sst - dTf, main = expression(paste("Temperature ",(~degree~C))))
library(fields)
lswc <- resample(lsw, dT)
lsac <- resample(lsa, dT)
xy <- data.frame(xyFromCell(lswc, 1:ncell(dT)))
z1 <- extract(lswc, xy)
z2 <- extract(lsac, xy)
v <- extract(dT, xy)
xyz <- cbind(xy, z1, z2)
sel <- which(is.na(v) == F)
v <- v[is.na(v) == F]
xyz <- xyz[sel, ]
tps <- fields::Tps(xyz, v, m = 3)
xy <- data.frame(xyFromCell(lsw, 1:ncell(lsw)))
z1 <- extract(lsw, xy)
z2 <- extract(lsa, xy)
xyz <- cbind(xy, z1, z2)
sel <- which(is.na(z1) == FALSE)
xyz <- xyz[sel, ]
xy$z <- NA
xy$z[sel] <- fields::predict(tps, xyz)
devtools::document()
?coastalTps
library(raster)
# =========================================
# Calculate land-sea temperature difference
# =========================================
temp <- tas[,,1]
sst <- 10.665
dT <- if_raster(sst - temp, dtm1km)
# ============================
# Obtain coastal exposure data
# ============================
lsw <- landsearatios[,,7]  # upwind
lsa <- apply(landsearatios, c(1, 2), mean) # mean, all directions
lsw <- if_raster(lsw, dtm100m)
lsa <- if_raster(lsa, dtm100m)
# ==========================================================
# Calculate coastal effects using thin-plate spline and plot
# ==========================================================
dTf <- coastalTps(dT, lsw, lsa)
par(mfrow = c(2, 1))
plot(sst - dT, main = expression(paste("Temperature ",(~degree~C))))
plot(sst - dTf, main = expression(paste("Temperature ",(~degree~C))))
devtools::document()
devtools::document()
?coastalTps
library(raster)
# =========================================
# Calculate land-sea temperature difference
# =========================================
temp <- tas[,,1]
sst <- 10.665
dT <- if_raster(sst - temp, dtm1km)
# ============================
# Obtain coastal exposure data
# ============================
lsw <- landsearatios[,,7]  # upwind
lsa <- apply(landsearatios, c(1, 2), mean) # mean, all directions
lsw <- if_raster(lsw, dtm100m)
lsa <- if_raster(lsa, dtm100m)
# ==========================================================
# Calculate coastal effects using thin-plate spline and plot
# ==========================================================
dTf <- coastalTps(dT, lsw, lsa)
par(mfrow = c(2, 1))
plot(sst - dT, main = expression(paste("Temperature ",(~degree~C))))
plot(sst - dTf, main = expression(paste("Temperature ",(~degree~C))))
document()
library(devtools)
document()
document()
devtools::document()
library(devtools)
library(devtools)
document()
devtools::document()
devtools::document()
?hourlyNCEP
?runauto
devtools::document()
?runauto
devtools::document()
?runauto
devtools::document()
library(devtools)
document()
document()
document()
document()
?runauto
document()
document()
document()
document()
document()
document()
document()
document()
?hourlyNCEP
library(devtools)
document()
?runauto
devtools::document()
devtools::document()
windheight
windhgt
?shortwavetopo
document()
document()
library(devtools)
document()
?clearskyrad
tme <- as.POSIXlt(c(0:23) * 3600, origin = "2010-05-23 00:00", tz = "GMT")
Io <- clearskyrad(tme, 50, -5, 0.007953766 , 11)
plot(Io, type = "l")
document()
tme <- as.POSIXlt(c(0:23) * 3600, origin = "2010-05-23 00:00", tz = "GMT")
Io <- clearskyrad(tme, 50, -5, 0.007953766 , 11)
plot(Io, type = "l")
document()
?clearksyrad
?clearskyrad
tme <- as.POSIXlt(c(0:23) * 3600, origin = "2010-05-23 00:00", tz = "GMT")
Io <- clearskyrad(tme, 50, -5, 0.007953766 , 11)
plot(Io ~ as.POSIXct(tme), type = "l")
?cloudfromrad
document()
?cloudfromrad
document()
?cloudfromrad
tme <- as.POSIXlt(c(0:23) * 3600, origin = "2010-05-23 00:00", tz = "GMT")
rad <- clearskyrad(tme, 50, -5, 0.007953766 , 11) * 0.75
cfc <- cloudfromrad(rad, tme, 50, -5, 0.007953766 , 11) * 0.75
plot(cfc ~ as.POSIXct(tme), type = "l") # should be 0.25
p = 101300
G = 2.78
Ie = 1352.778
tme <- as.POSIXlt(c(0:23) * 3600, origin = "2010-05-23 00:00", tz = "GMT")
rad <- clearskyrad(tme, 50, -5, 0.007953766 , 11) * 0.75
Ic <- clearskyrad(tme, lat, long, h, tc, p, G, Ie)
lat=50
long=-5
Ic <- clearskyrad(tme, lat, long, h, tc, p, G, Ie)
tc=11
h=0.007953766
Ic <- clearskyrad(tme, lat, long, h, tc, p, G, Ie)
s <- rad / Ic
s
s[s > 1] <- 1
s[s < 0] <- 0
s[1] <- mean(s, na.rm = T)
s[length(s)] <- mean(s, na.rm = T)
s <- na.approx(s)
s
cfc <- 1 - s
tme <- as.POSIXlt(c(0:23) * 3600, origin = "2010-05-23 00:00", tz = "GMT")
rad <- clearskyrad(tme, 50, -5, 0.007953766 , 11) * 0.75
cfc <- cloudfromrad(rad, tme, 50, -5, 0.007953766 , 11) * 0.75
cfc
G = 2.78
rad <- clearskyrad(tme, 50, -5, 0.007953766 , 11)
rad
document()
?cloudfromrad
tme <- as.POSIXlt(c(0:23) * 3600, origin = "2010-05-23 00:00", tz = "GMT")
rad <- clearskyrad(tme, 50, -5, 0.007953766 , 11) * 0.75
cfc <- cloudfromrad(rad, tme, 50, -5, 0.007953766 , 11)
plot(cfc ~ as.POSIXct(tme), type = "l") # should be 0.25
document()
library(devtools)
document()
document()
document()
library(devtools)
document()
jd <- julday(tme$year + 1900, tme$mon + 1, tme$mday)
lt <- tme$hour + tme$min / 60 + tme$sec / 3600
sa <- solalt(lt, lat, long, jd, merid, dst)
sa[sa < 0] <- NA
z <- (90 - sa) * (pi / 180)
m <- 35 * cos(z) * ((1224 * cos(z)^2 + 1)^(-0.5))
document()
library(devtools)
document()
library(devtools)
document()
?get_NCEP
lat <- 50
long <- -5
reanalysis2 = TRUE
tme <- as.POSIXlt(c(0:364) * 24 * 3600, origin = "2015-01-01", tz = 'UTC')
tst <- get_NCEP(50, -5, tme)
head(tst)
tail(tst)
dim(dfout)
dim(tst)
tme <- as.POSIXlt(c(1:15) * 24 * 3600, origin = "2015-01-15", tz = 'UTC')
xx<-get_NCEP(50, -5, tme)
head(tst)
tail(tst)
dim(tst)
head(xx)
tail(xx)
dim(xx)
?hourlytemp
?hourly_NCEP
?hourlyNCEP
tme <- as.POSIXlt(c(0:30) * 24 * 3600, origin ="2015-06-15 00:00", tz = "UTC")
# NB takes a while to download data
hdata<- hourlyNCEP(NA, 50, -5, tme)
head(hdata)
plot(hdata$temperature,type="l")
plot(hdata$rad_dni,type="l")
plot(hdata$rad_dif,type="l")
?hourlyNCEP
document()
devtools::document()
?hourlyNCEP
library(devtools)
document()
library(devtools)
document()
?dailyprecipNCEP
tme <- as.POSIXlt(c(1:15) * 24 * 3600, origin = "2015-01-15", tz = 'UTC')
dailyprecipNCEP(50, -5, tme)
devtools::document()
?windcoef
devtools::document()
?windcoef
file.exist("C:/Temp/")
file.exists()
?shift
devtools::document()
library(NicheMapR)
library(microclima)
library(raster)
dem1kmr <- raster("C:/Temp/dem1k_clipped.tiff")
dem1kmr <- projectRaster(dem1kmr, crs = "+init=epsg:3395")
runauto(dem1kmr, dstart="01/01/2016", dfinish="01/03/2016", hgt = 0.5,
l = NA, x = NA, coastal = TRUE, r.is.dem=TRUE, mesoresolution=500,
habitat = 14, plot.progress = FALSE, save.memory=TRUE)
dem1kmr <- raster("C:/Temp/dem1k_clipped.tiff")
dem1kmr <- projectRaster(dem1kmr, crs = "+init=epsg:3395")
runauto(dem1kmr, dstart="01/01/2016", dfinish="01/03/2016", hgt = 0.5,
l = NA, x = NA, coastal = TRUE, r.is.dem=TRUE, mesoresolution=500,
habitat = 14, plot.progress = FALSE, save.memory=F)
microclima::runauto(dem1kmr, dstart="01/01/2016", dfinish="01/03/2016", hgt = 0.5,
l = NA, x = NA, coastal = F, r.is.dem=TRUE, mesoresolution=500,
habitat = 14, plot.progress = FALSE, save.memory=TRUE)
?hourlyNCEP
document()
devtools::document()
dem1kmr <- raster("C:/Temp/dem1k_clipped.tiff")
dem1kmr <- projectRaster(dem1kmr, crs = "+init=epsg:3395")
r <- raster()
extent(r) <- extent(dem1kmr)
res(r) <- 300
dem1kmr <- resample(dem1kmr, r)
crs(dem1kmr) <- "+init=epsg:3395"
xx<-runauto(dem1kmr, dstart="01/01/2016", dfinish="01/03/2016", hgt = 0.5,
l = NA, x = NA, coastal = F, r.is.dem=TRUE, mesoresolution=500,
habitat = 14, plot.progress = FALSE, save.memory=TRUE)
dem1kmr <- raster("C:/Temp/dem1k_clipped.tiff")
dem1kmr <- projectRaster(dem1kmr, crs = "+init=epsg:3395")
r <- raster()
extent(r) <- extent(dem1kmr)
res(r) <- 300
dem1kmr <- resample(dem1kmr, r)
crs(dem1kmr) <- "+init=epsg:3395"
xx<-runauto(dem1kmr, dstart="01/01/2016", dfinish="01/03/2016", hgt = 0.5,
l = NA, x = NA, coastal = F, r.is.dem=TRUE, mesoresolution=500,
habitat = 14, plot.progress = T, save.memory=TRUE)
devtools::document()
dem1kmr <- raster("C:/Temp/dem1k_clipped.tiff")
dem1kmr <- projectRaster(dem1kmr, crs = "+init=epsg:3395")
r <- raster()
extent(r) <- extent(dem1kmr)
res(r) <- 300
dem1kmr <- resample(dem1kmr, r)
crs(dem1kmr) <- "+init=epsg:3395"
xx<-runauto(dem1kmr, dstart="01/01/2016", dfinish="01/03/2016", hgt = 0.5,
l = NA, x = NA, coastal = T, r.is.dem=TRUE, mesoresolution=500,
habitat = 14, plot.progress = T, save.memory=TRUE)
library(NicheMapR)
dem1kmr <- raster("C:/Temp/dem1k_clipped.tiff")
dem1kmr <- projectRaster(dem1kmr, crs = "+init=epsg:3395")
r <- raster()
extent(r) <- extent(dem1kmr)
res(r) <- 300
dem1kmr <- resample(dem1kmr, r)
crs(dem1kmr) <- "+init=epsg:3395"
xx<-runauto(dem1kmr, dstart="01/01/2016", dfinish="01/03/2016", hgt = 0.5,
l = NA, x = NA, coastal = T, r.is.dem=TRUE, mesoresolution=500,
habitat = 14, plot.progress = T, save.memory=TRUE)
dem1kmr <- raster("C:/Temp/dem1k_clipped.tiff")
dem1kmr <- projectRaster(dem1kmr, crs = "+init=epsg:3395")
r <- raster()
extent(r) <- extent(dem1kmr)
res(r) <- 300
dem1kmr <- resample(dem1kmr, r)
crs(dem1kmr) <- "+init=epsg:3395"
xx<-runauto(dem1kmr, dstart="01/01/2016", dfinish="01/03/2016", hgt = 0.5,
l = NA, x = NA, coastal = F, r.is.dem=TRUE, mesoresolution=500,
habitat = 14, plot.progress = T, save.memory=TRUE)
?runauto
library(raster)
require(NicheMapR)
# Get DEM for Pico, Azores
r <- get_dem(lat = 38.467429, long = -28.398995, resolution = 30)
plot(r)
# Takes ~ c. 5 minutes to run
temps <- runauto(r, "10/06/2010", "15/06/2010", hgt = 0.1, l = NA, x = NA,
habitat = "Barren or sparsely vegetated")
mypal <- colorRampPalette(c("darkblue", "blue", "green", "yellow", "orange",
"red"))(255)
meantemp <- temps$tmean
extent(meantemp) <- temps$e
par(mfrow = c(1, 1))
plot(meantemp, main = "Mean temperature", col = mypal)
# Interactive 3D plot
require(plotly)
zrange<-list(range = c(0, 3000))
plot_ly(z = ~is_raster(r)) %>%
add_surface(surfacecolor = ~is_raster(meantemp)) %>%
layout(scene = list(zaxis = zrange))
pdT <- dT[i] + p1[i] * d1^b1[i] + p2[i] * d2^b2[i]
document()
devtools::document()
for (i in 1:length(tme)) {
d1 <- bound((1 - lsr2[,,wd[i]] + 2) / 3)
xx <- p1[i] * d1^b1[i] + p2[i] * d2^b2[i]
xx[xx > 6] <- 6
xx[xx < -6] <- -6
pdT <- dT[i] + xx
aout[,,i] <- (pdT - sst[i]) * (-1)
if (plot.progress == T & i%%500 == 0) {
plot(if_raster(aout[,,i], landsea), main = tme[i])
}
}
library(raster)
require(NicheMapR)
# Get DEM for Pico, Azores
r <- get_dem(lat = 38.467429, long = -28.398995, resolution = 30)
plot(r)
# Takes ~ c. 5 minutes to run
temps <- runauto(r, "10/06/2010", "15/06/2010", hgt = 0.1, l = NA, x = NA,
habitat = "Barren or sparsely vegetated")
mypal <- colorRampPalette(c("darkblue", "blue", "green", "yellow", "orange",
"red"))(255)
meantemp <- temps$tmean
extent(meantemp) <- temps$e
par(mfrow = c(1, 1))
plot(meantemp, main = "Mean temperature", col = mypal)
# Interactive 3D plot
require(plotly)
zrange<-list(range = c(0, 3000))
plot_ly(z = ~is_raster(r)) %>%
add_surface(surfacecolor = ~is_raster(meantemp)) %>%
layout(scene = list(zaxis = zrange))
attributes(temps)
plot(temps$tmax)
plot(temps$tmin)
dem1kmr <- raster("C:/Temp/dem1k_clipped.tiff")
dem1kmr <- projectRaster(dem1kmr, crs = "+init=epsg:3395")
r <- raster()
extent(r) <- extent(dem1kmr)
res(r) <- 300
dem1kmr <- resample(dem1kmr, r)
crs(dem1kmr) <- "+init=epsg:3395"
xx<-runauto(dem1kmr, dstart="01/01/2016", dfinish="01/03/2016", hgt = 0.5,
l = NA, x = NA, coastal = F, r.is.dem=TRUE, mesoresolution=500,
habitat = 14, plot.progress = T, save.memory=TRUE)
devtools::document()
devtools::document()
dem1kmr <- raster("C:/Temp/dem1k_clipped.tiff")
dem1kmr <- projectRaster(dem1kmr, crs = "+init=epsg:3395")
r <- raster()
extent(r) <- extent(dem1kmr)
res(r) <- 300
dem1kmr <- resample(dem1kmr, r)
crs(dem1kmr) <- "+init=epsg:3395"
runauto(dem1kmr, dstart="01/01/2016", dfinish="01/03/2016", hgt = 0.5,
l = NA, x = NA, coastal = F, r.is.dem=TRUE, mesoresolution=500,
habitat = 14, plot.progress = T, save.memory=TRUE)
dem1kmr <- raster("C:/Temp/dem1k_clipped.tiff")
dem1kmr <- projectRaster(dem1kmr, crs = "+init=epsg:3395")
r <- raster()
extent(r) <- extent(dem1kmr)
res(r) <- 300
dem1kmr <- resample(dem1kmr, r)
crs(dem1kmr) <- "+init=epsg:3395"
runauto(dem1kmr, dstart="01/01/2016", dfinish="01/03/2016", hgt = 0.5,
l = NA, x = NA, coastal = T, r.is.dem=TRUE, mesoresolution=500,
habitat = 14, plot.progress = T, save.memory=TRUE)
devtools::document()
devtools::document()
laifromhabitat
timestep <- 960
Rsw <- 500
# Create initail parameters
tme <- as.POSIXlt(0, origin = "2020-05-04 12:00", tz = "GMT")
previn <- paraminit(20, 10, 15, 11, 80, 11, Rsw)
vegp <- habitatvars(4, 50, -5, tme, m = 20)
z<-c((1:20)-0.5)/20*vegp$hgt
soilp<- soilinit("Loam", timestep = timestep)
climvars <- list(tair=11,relhum=50,pk=101.3,u=2.1,tsoil=11,skyem=0.8,Rsw=Rsw,dp=NA,
psi_h=0,psi_m=0,phi_m=1)
# Run model 100 times for current time step
for (i in 1:1200) {
if(i%%100 == 0) {
st<-rev(previn$soiltc)
at<-previn$tc
sz<-rev(previn$sz)*-1
z<-previn$z
tc<-c(st,at)
zz<-c(sz,z)
plot(zz~tc, type = "l", xlab = "Temperature", ylab = "Height", main = i,
xlim = c(0,25), ylim = c(-2,20), lwd = 2, col = "red")
par(new=T)
plot(previn$z~previn$tleaf, type = "l", xlab = "", ylab = "", main = i,
xlim = c(0,25), ylim = c(-2,20), lwd = 2, col = "darkgreen")
}
previn  <- runcanopy(climvars, previn, vegp, soilp, timestep, tme, 50, -5)
}
library(devtools)
document()
?canopy
library(raster)
l <- lai(aerial_image[,,3], aerial_image[,,4])
l <- if_raster(l, dtm1m) # convert to raster
fr <- canopy(l)
plot(fr, main = "Fractional canopy cover")
document()
?canopy
library(raster)
l <- lai(aerial_image[,,3], aerial_image[,,4])
l <- if_raster(l, dtm1m) # convert to raster
fr <- canopy(l)
fr[is.na(dtm1m)] <- NA
plot(fr, main = "Fractional canopy cover")
document()
document()
document()
document()
document()
?solarindex
2*pi
cos(0)
source('~/projects/microclima/R/radiationtools.R', encoding = 'UTF-8', echo=TRUE)
library(sf)
